<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>leetcode 65.有效数字</title>
      <link href="/2020/08/06/65-%E6%9C%89%E6%95%88%E6%95%B0%E5%AD%97/"/>
      <url>/2020/08/06/65-%E6%9C%89%E6%95%88%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">验证给定的字符串是否可以解释为十进制数字。</span><br><span class="line"></span><br><span class="line">例如:</span><br><span class="line"></span><br><span class="line">&quot;0&quot; &#x3D;&gt; true</span><br><span class="line">&quot; 0.1 &quot; &#x3D;&gt; true</span><br><span class="line">&quot;abc&quot; &#x3D;&gt; false</span><br><span class="line">&quot;1 a&quot; &#x3D;&gt; false</span><br><span class="line">&quot;2e10&quot; &#x3D;&gt; true</span><br><span class="line">&quot; -90e3   &quot; &#x3D;&gt; true</span><br><span class="line">&quot; 1e&quot; &#x3D;&gt; false</span><br><span class="line">&quot;e3&quot; &#x3D;&gt; false</span><br><span class="line">&quot; 6e-1&quot; &#x3D;&gt; true</span><br><span class="line">&quot; 99e2.5 &quot; &#x3D;&gt; false</span><br><span class="line">&quot;53.5e93&quot; &#x3D;&gt; true</span><br><span class="line">&quot; --6 &quot; &#x3D;&gt; false</span><br><span class="line">&quot;-+3&quot; &#x3D;&gt; false</span><br><span class="line">&quot;95a54e53&quot; &#x3D;&gt; false</span><br><span class="line"></span><br><span class="line">说明: 我们有意将问题陈述地比较模糊。在实现代码之前，你应当事先思考所有可能的情况。这里给出一份可能存在于有效十进制数字中的字符列表：</span><br><span class="line"></span><br><span class="line">数字 0-9</span><br><span class="line">指数 - &quot;e&quot;</span><br><span class="line">正&#x2F;负号 - &quot;+&quot;&#x2F;&quot;-&quot;</span><br><span class="line">小数点 - &quot;.&quot;</span><br><span class="line">当然，在输入中，这些字符的上下文也很重要。</span><br></pre></td></tr></table></figure><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>首先我们明白一些限制关系</p><p>空格只能出现在首部或者末尾</p><p>-+号只能出现在首部或者e与数字中间</p><p>字符除了e之外其他无法出现</p><p>-+号作为正负号只能出现一个且一次，可以搭配e指数出现两次</p><p>小数点与数字间无法有空格，且小数点后必须有数字,如果前面没有数字则前面不能出现其他任何数据</p><p>e作为指数后面必须跟上对应的-+或者数字，且-+后面必须跟上数字</p><p><strong>那么</strong>借用leetcode大佬的图来进行解释</p><div align=center><img src="image-20200806232253777.png"/></div><p>可以从图中可以看出，这个是遍历了所有输出为正确的路径，红色代表输出为正确，如果终止在蓝色则表示输出错误，同时这个也叫做确定的有限状态机，蓝色在其中表示中间状态。</p><p>我对每个结点的输出生成一个列表</p><p>[False, False, False, True, False, True, True, False]</p><p>但是因为会出现空格在后置的情况，所以图上应该加上一个节点8， 链接3，5，6节点，只有当在前置数据都正确的情况下后置字符为空格才会完全正确</p><p>所以完整列表为[False, False, False, True, False, True, True, False，True]，我们称为<strong>状态结果列表</strong></p><p>同时我们可以基于图来得到一个流程转接的表，对应节点没有下一跳对应状态节点的都填-1，表示无正确选择路径。</p><table><thead><tr><th>状态</th><th>空格</th><th>-+</th><th>e</th><th>小数点</th><th>非e字符</th><th>数字</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>1</td><td>-1</td><td>2</td><td>-1</td><td>6</td></tr><tr><td>1</td><td>-1</td><td>-1</td><td>-1</td><td>2</td><td>-1</td><td>6</td></tr><tr><td>2</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>3</td></tr><tr><td>3</td><td>8</td><td>-1</td><td>4</td><td>-1</td><td>-1</td><td>3</td></tr><tr><td>4</td><td>-1</td><td>7</td><td>-1</td><td>-1</td><td>-1</td><td>5</td></tr><tr><td>5</td><td>8</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>5</td></tr><tr><td>6</td><td>8</td><td>-1</td><td>4</td><td>3</td><td>-1</td><td>6</td></tr><tr><td>7</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>5</td></tr><tr><td>8</td><td>8</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td></tr></tbody></table><p>那么我们可以基于这个表来判断最后一个字符可以得到的状态，基于上面得到的<strong>状态结果列表</strong></p><p>那么代码可以如下这么写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isNumber</span>(<span class="params">self, s: str</span>) -&gt; bool:</span></span><br><span class="line">        result_list = [<span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">True</span>]</span><br><span class="line">        node_jump_table = [</span><br><span class="line">            [<span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">6</span>],</span><br><span class="line">            [<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">6</span>],</span><br><span class="line">            [<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">3</span>],</span><br><span class="line">            [<span class="number">8</span>, <span class="number">-1</span>, <span class="number">4</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">3</span>],</span><br><span class="line">            [<span class="number">-1</span>, <span class="number">7</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">5</span>],</span><br><span class="line">            [<span class="number">8</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">5</span>],</span><br><span class="line">            [<span class="number">8</span>, <span class="number">-1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">-1</span>, <span class="number">6</span>],</span><br><span class="line">            [<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">5</span>],</span><br><span class="line">            [<span class="number">8</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>],</span><br><span class="line">        ]</span><br><span class="line">        node_map = &#123;<span class="string">&quot; &quot;</span>: <span class="number">0</span>, <span class="string">&quot;-&quot;</span>: <span class="number">1</span>, <span class="string">&quot;+&quot;</span>: <span class="number">1</span>, <span class="string">&quot;e&quot;</span>: <span class="number">2</span>, <span class="string">&quot;.&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                    <span class="string">&quot;0&quot;</span>: <span class="number">5</span>, <span class="string">&quot;1&quot;</span>: <span class="number">5</span>, <span class="string">&quot;2&quot;</span>: <span class="number">5</span>, <span class="string">&quot;3&quot;</span>: <span class="number">5</span>, <span class="string">&quot;4&quot;</span>: <span class="number">5</span>, <span class="string">&quot;5&quot;</span>: <span class="number">5</span>, <span class="string">&quot;6&quot;</span>: <span class="number">5</span>, <span class="string">&quot;7&quot;</span>: <span class="number">5</span>, <span class="string">&quot;8&quot;</span>: <span class="number">5</span>, <span class="string">&quot;9&quot;</span>: <span class="number">5</span>&#125;</span><br><span class="line">        node_status = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> s:</span><br><span class="line">            node_status = node_jump_table[node_status][node_map.get(_, <span class="number">4</span>)]</span><br><span class="line">            <span class="keyword">if</span> node_status &lt; <span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> result_list[node_status]</span><br></pre></td></tr></table></figure><p>当然人生苦短，我用python，为什么这么说呢，因为有个骚操作就是python的float可以一键实现这个判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isNumber</span>(<span class="params">self, s: str</span>) -&gt; bool:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            float(s)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 状态机 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
